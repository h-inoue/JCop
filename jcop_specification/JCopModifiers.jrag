/*
 *
 */
aspect JCopModifiers {  
  
  syn boolean MethodDecl.isBefore() = getModifiers().isBefore();
  syn boolean MethodDecl.isAfter() = getModifiers().isAfter();
  syn boolean FieldDeclaration.isBefore() = getModifiers().isBefore();
  syn boolean FieldDeclaration.isAfter() = getModifiers().isAfter();
  
  syn boolean TypeDecl.isBefore() = getModifiers().isBefore();
  syn boolean TypeDecl.isAfter() = getModifiers().isAfter();
  
  syn lazy boolean Modifiers.isBefore() = numModifier("before") != 0;
  syn lazy boolean Modifiers.isAfter() = numModifier("after") != 0;
  
  refine Modifiers public void TypeDecl.checkModifiers() {
     if(isBefore())
      error("before pertains only to partial method declarations");
	 if(isAfter())
      error("after pertains only to partial method declarations");
  }
  
  refine Modifiers public void MethodDecl.checkModifiers() {
	  super.checkModifiers();
	  if(hostType().isClassDecl()) {
		  // 8.4.3.1
		  if(!hostType().isEnumDecl() && isAbstract() && !hostType().isAbstract())
			  error("class must be abstract to include abstract methods");
		  // 8.4.3.1
		  if(isAbstract() && isPrivate())
			  error("method may not be abstract and private");
		  // 8.4.3.1
		  // 8.4.3.2
		  if(isAbstract() && isStatic())
			  error("method may not be abstract and static");
		  if(isAbstract() && isSynchronized())
			  error("method may not be abstract and synchronized");
		  // 8.4.3.4
		  if(isAbstract() && isNative())
			  error("method may not be abstract and native");
		  if(isAbstract() && isStrictfp())
			  error("method may not be abstract and strictfp");
		  if(isNative() && isStrictfp())
			  error("method may not be native and strictfp");
	  }
	  if(hostType().isInterfaceDecl()) {
		  // 9.4
		  if(isStatic())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be static");
		  if(isStrictfp())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be strictfp");
		  if(isNative())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be native");
		  if(isSynchronized())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be synchronized");
		  if(isProtected())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be protected");
		  if(isPrivate())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be private");
		  else if(isFinal())
			  error("interface method " + signature() + " in " +
					hostType().typeName() +  " may not be final");
	  }
	  if(isBefore() && !isPartialMethod())
		  error("before pertains only to partial method declarations");
	  if(isAfter() && !isPartialMethod())
		  error("after pertains only to partial method declarations");
  }
  
  refine Modifiers public void FieldDeclaration.checkModifiers() {
     if(isBefore())
      error("before pertains only to partial method declarations");
	 if(isAfter())
      error("after pertains only to partial method declarations");
  }
}