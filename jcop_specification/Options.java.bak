package AST;

import java.util.HashSet;
import java.io.File;
import java.util.*;
import beaver.*;
import java.util.ArrayList;
import java.util.zip.*;
import java.io.*;
import java.io.FileNotFoundException;
import java.util.Collection;
import jcop.compiler.CompilerConfiguration;
import jcop.typecheck.LookupCopMembers;
import jcop.typecheck.*;
/**
 * @ast class
 * 
 */
public class Options extends java.lang.Object {
	static  class Option {
		public String name;
		public boolean hasValue;
		public boolean isCollection;
		public Option(String name, boolean hasValue, boolean isCollection) {
			this.name = name;
			this.hasValue = hasValue;
			this.isCollection = isCollection;
		}
	}

	private  Map options = new HashMap();

	private  Map optionDescriptions = new HashMap();

	private  HashSet files = new HashSet();

	public  Collection files() {
		return files;
	}

	public  void initOptions() {
		options = new HashMap();
		optionDescriptions = new HashMap();
		files = new HashSet();
	}

	public  void addKeyOption(String name) {
		if(optionDescriptions.containsKey(name))
			throw new Error("Command line definition error: option description for " + name + " is multiply declared");
		optionDescriptions.put(name, new Option(name, false, false));
	}

	public  void addKeyValueOption(String name) {
		if(optionDescriptions.containsKey(name))
			throw new Error("Command line definition error: option description for " + name + " is multiply declared");
		optionDescriptions.put(name, new Option(name, true, false));
	}

	public  void addKeyCollectionOption(String name) {
		if(optionDescriptions.containsKey(name))
			throw new Error("Command line definition error: option description for " + name + " is multiply declared");
		optionDescriptions.put(name, new Option(name, true, true));
	}

	public  void addOptionDescription(String name, boolean value) {
		if(optionDescriptions.containsKey(name))
			throw new Error("Command line definition error: option description for " + name + " is multiply declared");
		optionDescriptions.put(name, new Option(name, value, false));
	}

	public  void addOptionDescription(String name, boolean value, boolean isCollection) {
		if(optionDescriptions.containsKey(name))
			throw new Error("Command line definition error: option description for " + name + " is multiply declared");
		optionDescriptions.put(name, new Option(name, value, isCollection));
	}

	public  void addOptions(String[] args) {
		for(int i = 0; i < args.length; i++) {
			String arg = args[i];
			if(arg.startsWith("@")) {
				try {
					String fileName = arg.substring(1,arg.length());
					java.io.StreamTokenizer tokenizer = new java.io.StreamTokenizer(new java.io.FileReader(fileName));
					tokenizer.resetSyntax();
					tokenizer.whitespaceChars(' ',' ');
					tokenizer.whitespaceChars('\t','\t');
					tokenizer.whitespaceChars('\f','\f');
					tokenizer.whitespaceChars('\n','\n');
					tokenizer.whitespaceChars('\r','\r');
					tokenizer.wordChars(33,255);
					ArrayList list = new ArrayList();
					int next = tokenizer.nextToken();
					while(next != java.io.StreamTokenizer.TT_EOF) {
						if(next == java.io.StreamTokenizer.TT_WORD) {
							list.add(tokenizer.sval);
						}
						next = tokenizer.nextToken();
					}
					String[] newArgs = new String[list.size()];
					int index = 0;
					for(Iterator iter = list.iterator(); iter.hasNext(); index++) {
						newArgs[index] = (String)iter.next();
					}
					addOptions(newArgs);
				} catch (java.io.FileNotFoundException e) {
					System.err.println("File not found: "+arg.substring(1));
				} catch (java.io.IOException e) {
					System.err.println("Exception: "+e.getMessage());
				}
			}
			else if(arg.startsWith("-")) {
				if(!optionDescriptions.containsKey(arg))
					throw new Error("Command line argument error: option " + arg + " is not defined");
				Option o = (Option)optionDescriptions.get(arg);
        
				if(!o.isCollection && options.containsKey(arg))
					throw new Error("Command line argument error: option " + arg + " is multiply defined");
        
				if(o.hasValue && !o.isCollection) {
					String value = null;
					if(i + 1 > args.length - 1)
						throw new Error("Command line argument error: value missing for key " + arg);
					value = args[i+1];
					if(value.startsWith("-"))
						throw new Error("Command line argument error: value missing for key " + arg);
					i++;
					options.put(arg, value);
				}
				else if(o.hasValue && o.isCollection) {
					String value = null;
					if(i + 1 > args.length - 1)
						throw new Error("Command line argument error: value missing for key " + arg);
					value = args[i+1];
					if(value.startsWith("-"))
						throw new Error("Command line argument error: value missing for key " + arg);
					i++;
					Collection c = (Collection)options.get(arg);
					if(c == null)
						c = new ArrayList();
					c.add(value);
					options.put(arg, c);
				}
				else {
					options.put(arg, null);
				}
			}
			else {
				files.add(arg);
				addFilesTo(files,arg);
			}
		}
	}

	public  boolean hasOption(String name) {
		return options.containsKey(name);
	}

	public  void setOption(String name) {
		options.put(name, null);
	}

	public  boolean hasValueForOption(String name) {
		return options.containsKey(name) && options.get(name) != null;
	}

	public  String getValueForOption(String name) {
		if(!hasValueForOption(name))
			throw new Error("Command line argument error: key " + name + " does not have a value");
		return (String)options.get(name);
	}

	public  void setValueForOption(String value, String option) {
		options.put(option, value);
	}

	public  Collection getValueCollectionForOption(String name) {
		if(!hasValueForOption(name))
			throw new Error("Command line argument error: key " + name + " does not have a value");
		return (Collection)options.get(name);
	}

	public  boolean verbose() {
		return hasOption("-verbose");
	}

	/**
	 * @ast method 
	 * @aspect JCopFileSupport
	 * @declaredat /home/lab8/hinoue/src/SafeJCop/workspace/JCop/jcop_specification/jcop_file_support.jrag:11
	 */
	private String parseClassPath(String path, String extension) {
		path = path.replaceAll("\\.", "\\" + File.separator);
      
		if(path.contains(":") /*&& Program.hasValueForOption(jcop.Globals.CompilerOps.rootDir)*/) 
			path = /*Program.getValueForOption(jcop.Globals.CompilerOps.rootDir) + "\\" +*/ path;
		else if(CompilerConfiguration.getInstance().hasValueForOption(jcop.Globals.CompilerOps.sourcepath))
			path = CompilerConfiguration.getInstance().getValueForOption(jcop.Globals.CompilerOps.sourcepath) + File.separator + path;
		else
			path = System.getProperty("user.dir") + File.separator + path;	  
	  
		String jcopVersion = path + jcop.Globals.fileExtension;
		String javaVersion = path + ".java";
		if(new File(jcopVersion).exists())
			return jcopVersion;	  
		if(new File(javaVersion).exists())
			return javaVersion;
	  
		return javaVersion;
	}
	/**
	 * @ast method 
	 * @aspect JCopFileSupport
	 * @declaredat /home/lab8/hinoue/src/SafeJCop/workspace/JCop/jcop_specification/jcop_file_support.jrag:31
	 */
	private void addFilesTo(HashSet files, String arg) {
		//remove the old file representation	 
	    final String extension = jcop.Globals.fileExtension;	
		files.remove(arg);	    
		arg = parseClassPath(arg, extension);
		File[] sourceFiles = parseFiles(arg, extension);
	
		for (File currentFile : sourceFiles) 
			files.add(currentFile.getAbsolutePath());	
		if (CompilerConfiguration.getInstance().hasValueForOption(jcop.Globals.CompilerOps.layerpath)) 
			addUnreferencedLayers(files);			
	}
	/**
	 * @ast method 
	 * @aspect JCopFileSupport
	 * @declaredat /home/lab8/hinoue/src/SafeJCop/workspace/JCop/jcop_specification/jcop_file_support.jrag:44
	 */
	private File[] parseFiles(String arg, String extension){
		String wildcardPattern = "*" + extension; 
		if (arg.endsWith(wildcardPattern))  
			return parseMultipleFiles(arg, extension);	  
		else 
			return new File[]{ new File(arg)};	  	  			  
	}
	/**
	 * @ast method 
	 * @aspect JCopFileSupport
	 * @declaredat /home/lab8/hinoue/src/SafeJCop/workspace/JCop/jcop_specification/jcop_file_support.jrag:52
	 */
	private void addUnreferencedLayers(HashSet files) {
		// currently only support for one dir:		
		jcop.compiler.filecopy.LayerFolderLookup lookup 
			= new jcop.compiler.filecopy.LayerFolderLookup();		
		for (File file : lookup.getCompilationUnits()) 
			files.add(file.getAbsolutePath());		
	}
	/**
	 * @ast method 
	 * @aspect JCopFileSupport
	 * @declaredat /home/lab8/hinoue/src/SafeJCop/workspace/JCop/jcop_specification/jcop_file_support.jrag:60
	 */
	private File[] parseMultipleFiles(String path, final String extension) {
		String wildcardPattern = "*" + extension;
		String folderPath = path.substring(0, path.lastIndexOf(wildcardPattern));	  	   
		File folder = new File(folderPath);
		return folder.listFiles(
			new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().endsWith(extension);
				}
			});
	}
}
